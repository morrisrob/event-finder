{"version":3,"sources":["components/ShowTodaysEvents.jsx","components/MainPage.jsx","components/PageContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["moment","require","fetch","URL","headers","Authorization","Accept","ShowTodaysEvents","props","searchHandler","searchString","setState","btnClicked","then","response","json","data","events","showTodaysEvents","event","now","tomorrow","add","format","myChangeHandler","eventSearch","target","value","state","show","updated","whichButton","this","nextProps","sort","a","b","eventDateLocal","map","index","id","name","venue","webURI","ticketInfo","key","label","Intl","NumberFormat","style","currency","minListPrice","totalTickets","href","class","renderTableData","length","Component","MainPage","type","onChange","onClick","action","PageContainer","handler","bind","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f74efa1b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from \"react-moment\";\nimport \"./ShowTodaysEvents.css\";\nconst moment = require(\"moment\");\nconst fetch = require(\"node-fetch\");\nconst URL =\n  \"https://api.stubhub.com/sellers/search/events/v3?state=WI&rows=50&parking=false\";\nconst headers = {\n  Authorization: \"Bearer mYTy3Gb8J4uYkSCs7ioVCvZJiqTF\",\n  Accept: \"application/json\"\n};\n\nclass ShowTodaysEvents extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [],\n      eventSearch: \"\",\n      btnClicked: false,\n      show: false,\n      updated: false,\n      whichButton: \"\",\n      searchString: \"\"\n    };\n  }\n\n  searchHandler = searchString => {\n    // event.preventDefault();\n    let events = [];\n    this.setState.btnClicked = true;\n    fetch(`${URL}&q=${searchString}`, {\n      headers\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ events: data.events });\n      });\n  };\n\n  componentDidMount(props) {\n    this.setState({\n      whichButton: this.props.whichButton,\n      searchString: this.props.searchString\n    });\n\n    if (this.props.whichButton === \"todaysEvents\") {\n      this.showTodaysEvents();\n    } else {\n      this.searchHandler(this.props.searchString);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.whichButton === \"todaysEvents\") {\n      this.showTodaysEvents();\n    } else {\n      this.searchHandler(nextProps.searchString);\n    }\n    this.setState({ updated: true });\n  }\n\n  showTodaysEvents = event => {\n    this.setState({ btnClicked: true });\n    const now = moment();\n    const tomorrow = moment(now).add(1, \"d\");\n    let events = [];\n    fetch(\n      `${URL}&dateLocal=${now.format(\"YYYY-MM-DD\")} TO ${tomorrow.format(\n        \"YYYY-MM-DD\"\n      )}`,\n      {\n        headers\n      }\n    )\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ events: data.events });\n      });\n  };\n\n  myChangeHandler = event => {\n    this.setState({ eventSearch: event.target.value });\n  };\n\n  renderTableData() {\n    this.state.events.sort((a, b) =>\n      a.eventDateLocal > b.eventDateLocal ? 1 : -1\n    ); //sort by date ascending\n    return this.state.events.map((event, index) => {\n      const { id, name, eventDateLocal, venue, webURI, ticketInfo } = event; //destructuring\n      return (\n        <tr key={id}>\n          <td label=\"Date\">\n            <Moment format=\"ddd, MMM Do\">{eventDateLocal}</Moment>\n          </td>\n          <td label=\"Time\">\n            <Moment format=\"h:mm a\">{eventDateLocal}</Moment>\n          </td>\n          <td label=\"Event Name\">{name}</td>\n          <td label=\"Venue\">{venue.name}</td>\n\n          <td label=\"Lowest Price\">\n            {new Intl.NumberFormat(\"en-US\", {\n              style: \"currency\",\n              currency: \"USD\"\n            }).format(ticketInfo.minListPrice)}\n          </td>\n          <td label=\"Tickets Available\">{ticketInfo.totalTickets}</td>\n          <td>\n            {ticketInfo.totalTickets > 0 && (\n              <a href={`http://www.stubhub.com/${webURI}`}>Buy Tickets</a>\n            )}\n          </td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    let events = [];\n    return (\n      <div id=\"tableContainer\" class=\"container\">\n        <div id=\"eventsTable\" class=\"table-responsive\">\n          <table class=\"table table-striped table-dark \" id=\"events\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Event Name</th>\n                <th>Venue</th>\n                <th>Lowest Price</th>\n                <th>Tickets Available</th>\n              </tr>\n            </thead>\n            <tbody>{this.renderTableData()}</tbody>\n          </table>\n          {this.state.btnClicked === true && this.state.events.length === 0 && (\n            <p>No Results Found</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ShowTodaysEvents;\n","import React, { Component } from \"react\";\nimport \"./MainPage.css\";\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      eventSearch: \"\"\n    };\n  }\n\n  myChangeHandler = event => {\n    this.setState({ eventSearch: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"pageTitle\">\n          <div id=\"mainText\">\n            <h1>Wisconsin Ticket Finder</h1>\n            <p>StubHub Event Search</p>\n          </div>\n        </div>\n        <div id=\"search\">\n          <div class=\"row justify-content-center\">\n            <div id=\"searchForm\">\n              <input\n                id=\"searchBox\"\n                type=\"text\"\n                class=\"form-rounded\"\n                onChange={this.myChangeHandler}\n              />\n            </div>\n          </div>\n          <div class=\"row justify-content-center\">\n            <button\n              id=\"searchBtn\"\n              class=\"btn btn-sm btn-primary\"\n              onClick={() =>\n                this.props.action(\"search\", this.state.eventSearch)\n              }\n            >\n              {\" \"}\n              Search{\" \"}\n            </button>\n\n            <button\n              class=\"btn btn-sm btn-primary\"\n              onClick={() => this.props.action(\"todaysEvents\")}\n            >\n              {\" \"}\n              Show Today's Events{\" \"}\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainPage;","import React, { Component } from \"react\";\nimport MainPage from \"./MainPage\";\nimport ShowTodaysEvents from \"./ShowTodaysEvents\";\n\nclass PageContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handler = this.handler.bind(this);\n    this.state = {\n      btnClicked: false,\n      whichButton: \"\",\n      searchString: \"\"\n    };\n  }\n\n  handler(whichButton, searchString) {\n    this.setState({\n      btnClicked: true,\n      searchString: searchString\n    });\n    if (whichButton === \"todaysEvents\") {\n      this.setState({\n        whichButton: \"todaysEvents\"\n      });\n    } else {\n      this.setState({\n        whichButton: \"search\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <MainPage action={this.handler} />\n        {this.state.btnClicked === true && (\n          <ShowTodaysEvents\n            whichButton={this.state.whichButton}\n            searchString={this.state.searchString}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PageContainer;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport ShowTodaysEvents from \"./components/ShowTodaysEvents\";\nimport MainPage from \"./components/MainPage\";\nimport PageContainer from \"./components/PageContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageContainer />\n      {/* <ShowTodaysEvents /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}