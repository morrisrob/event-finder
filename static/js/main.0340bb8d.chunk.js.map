{"version":3,"sources":["logo.svg","library/getEvents.js","components/TodaysEvents.jsx","components/ShowTodaysEvents.jsx","components/MainPage.jsx","components/TopNavbar.jsx","components/SearchForm.jsx","components/PageContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","events","fetch","require","getEventsFromAPI","headers","then","response","json","data","console","log","id","status","locale","name","description","webURI","eventDateLocal","eventDateUTC","createdDate","lastUpdatedDate","hideEventDate","hideEventTime","venue","city","state","postalCode","country","venueConfigId","venueConfigName","timezone","performers","Object","ancestors","categories","Array","groupings","currencyCode","ticketInfo","minListPrice","maxListPrice","totalTickets","totalListings","eventsArray","keys","map","i","Component","moment","URL","ShowTodaysEvents","props","searchHandler","searchString","setState","btnClicked","showTodaysEvents","event","now","tomorrow","add","format","myChangeHandler","eventSearch","target","value","show","updated","whichButton","this","nextProps","sort","a","b","index","key","Intl","NumberFormat","style","currency","href","class","renderTableData","length","MainPage","type","onChange","onClick","action","PageContainer","handler","bind","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0340bb8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","/* eslint-disable no-undef */\nconst fetch = require(\"node-fetch\");\nconst city = \"Milwaukee\";\nconst venue = \"Shank Hall\";\nlet events;\n\ngetEventsFromAPI = () => {\n    fetch(`https://api.stubhub.com/sellers/search/events/v3?city=${city}&venue=${venue}`, {\n        headers: {\n            \"Authorization\": \"Bearer mYTy3Gb8J4uYkSCs7ioVCvZJiqTF\",\n            \"Accept\": \"application/json\"\n        }\n    })\n\n    .then(response => response.json())\n    .then(data => {\n        // console.log(data);\n        events = data.events;\n        console.log(events)\n    })\n\n    return events;\n};\n\nmodule.exports.getEventsFromAPI = getEventsFromAPI;","import React, { Component } from 'react';\n\nlet data = [\n        {\n            id: 104342681,\n            status: 'Active',\n            locale: 'en_US',\n            name: 'No Quarter - Led Zeppelin Tribute Tickets (21+ Event)',\n            description: 'No Quarter - Led Zeppelin Tribute Shank Hall Tickets - Buy ' +\n                'and sell No Quarter - Led Zeppelin Tribute Milwaukee ' +\n                'Tickets for December 7 at Shank Hall in Milwaukee, WI on ' +\n                'StubHub!',\n            webURI: 'no-quarter-led-zeppelin-tribute-tickets-no-quarter-led-zeppelin-tribute-milwaukee-shank-hall-12-7-2019/event/104342681/',\n            eventDateLocal: '2019-12-07T20:00:00-0600',\n            eventDateUTC: '2019-12-08T02:00:00+0000',\n            createdDate: '2019-09-17T19:20:14+0000',\n            lastUpdatedDate: '2019-09-17T19:20:36+0000',\n            hideEventDate: false,\n            hideEventTime: false,\n            venue: {\n                id: 3624,\n                name: 'Shank Hall',\n                city: 'Milwaukee',\n                state: 'WI',\n                postalCode: '53202',\n                country: 'US',\n                venueConfigId: 4364,\n                venueConfigName: 'General Admission Only'\n            },\n            timezone: 'CST',\n            performers: [[Object]],\n            ancestors: { categories: [Array], groupings: [Array], performers: [Array] },\n            currencyCode: 'USD',\n            ticketInfo: {\n                minListPrice: 26.9,\n                maxListPrice: 47.25,\n                totalTickets: 16,\n                totalListings: 3\n            }\n        },\n        {\n            id: 104336334,\n            status: 'Active',\n            locale: 'en_US',\n            name: 'Samantha Fish Tickets (21+ Event)',\n            description: 'Samantha Fish Shank Hall Tickets - Buy and sell Samantha Fish ' +\n                'Milwaukee Tickets for December 4 at Shank Hall in Milwaukee, WI on ' +\n                'StubHub!',\n            webURI: 'samantha-fish-tickets-samantha-fish-milwaukee-shank-hall-12-4-2019/event/104336334/',\n            eventDateLocal: '2019-12-04T20:00:00-0600',\n            eventDateUTC: '2019-12-05T02:00:00+0000',\n            createdDate: '2019-09-13T16:26:30+0000',\n            lastUpdatedDate: '2019-09-13T16:26:47+0000',\n            hideEventDate: false,\n            hideEventTime: false,\n            venue: {\n                id: 3624,\n                name: 'Shank Hall',\n                city: 'Milwaukee',\n                state: 'WI',\n                postalCode: '53202',\n                country: 'US',\n                venueConfigId: 4364,\n                venueConfigName: 'General Admission Only'\n            },\n            timezone: 'CST',\n            performers: [[Object]],\n            ancestors: { categories: [Array], groupings: [Array], performers: [Array] },\n            currencyCode: 'USD',\n            ticketInfo: {\n                minListPrice: 57.91,\n                maxListPrice: 82.95,\n                totalTickets: 24,\n                totalListings: 4\n            }\n        },\n]\n\n// import { getEventsFromAPI } from './getEvents'\nconst getEvents = require('../library/getEvents')\n\n// let events = getEvents.getEventsFromAPI();\nlet events;\nlet eventsArray = [];\n// console.log(data);\n// console.log(events);\n\n\neventsArray = Object.keys(data).map(i => data[i]);\nconsole.log(eventsArray);\n\nclass TodaysEvents extends Component {\n    state = {  }\n    render() { \n        return (<div><h1>Today's Events:</h1>\n            {eventsArray.map((event, index) => (\n                <p>{event.name}</p>\n            ))}\n        </div> )\n    }\n\n}\n\nexport default TodaysEvents;","import React, { Component } from 'react';\nimport Moment from 'react-moment';\nimport './ShowTodaysEvents.css';\nconst moment = require('moment');\nconst fetch = require(\"node-fetch\");\nconst city = \"Milwaukee\";\nconst state = \"WI\";\nconst venue = 'Shank Hall'\nconst rows = '50'\nconst URL = \"https://api.stubhub.com/sellers/search/events/v3?state=WI&rows=50&parking=false\";\nconst headers = {\n    \"Authorization\": \"Bearer mYTy3Gb8J4uYkSCs7ioVCvZJiqTF\",\n    \"Accept\": \"application/json\"\n    }      \n\nclass ShowTodaysEvents extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: [],\n            eventSearch: \"\",\n            btnClicked: false,\n            show: false,\n            updated: false,\n            whichButton: '',\n            searchString: '',\n        };\n    }\n\n    searchHandler = (searchString) => {\n        // event.preventDefault();\n        let events = [];\n        this.setState.btnClicked = true;\n        fetch(`${URL}&q=${searchString}`, {\n            headers\n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ events: data.events })\n            });\n    }\n\n    componentDidMount(props) {\n        this.setState({\n            whichButton: this.props.whichButton,\n            searchString: this.props.searchString,\n        }, console.log('props received!' + this.props.whichButton + \" \" + this.props.searchString));\n        \n        // if (nextProps.amount !== this.state.current) {\n        //     this.setState(prevState => ({ previous: prevState.current, current: nextProps.amount }));\n        // }\n        if (this.props.whichButton === 'todaysEvents') {\n            this.showTodaysEvents();\n        } else {\n            this.searchHandler(this.props.searchString)\n        }\n    }\n\n    // componentDidUpdate(oldProps) {\n    //     console.log('props updated!' + this.props.whichButton + \" \" + this.props.searchString);\n       \n    //     if (this.props.whichButton === 'todaysEvents') {\n    //         this.showTodaysEvents();\n    //     } else {\n    //         this.searchHandler(this.props.searchString)\n    //     }\n    // }\n\n    componentWillReceiveProps(nextProps) {\n\n        console.log('props updated!' + nextProps.whichButton + \" \" + nextProps.searchString);\n        // if (nextProps.amount !== this.state.current) {\n        //     this.setState(prevState => ({ previous: prevState.current, current: nextProps.amount }));\n        // }\n        if (nextProps.whichButton === 'todaysEvents') {\n            this.showTodaysEvents();\n        } else {\n            this.searchHandler(nextProps.searchString)\n        }\n        this.setState({updated: true});\n    }\n\n    showTodaysEvents = (event) => {\n        // event.preventDefault();\n        this.setState({ btnClicked: true }, console.log(this.state.btnClicked));\n        const now = moment();\n        const tomorrow = moment(now).add(1, 'd');\n        let events = [];\n        fetch(`${URL}&dateLocal=${now.format(\"YYYY-MM-DD\")} TO ${tomorrow.format(\"YYYY-MM-DD\")}`, {\n            headers\n        })\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ events: data.events })\n            });\n    }\n\n    myChangeHandler = (event) => {\n        this.setState({ eventSearch: event.target.value });\n    }\n\n    renderTableData() {\n        // const obj = this.state.events;\n        console.log(this.state.events);\n        this.state.events.sort((a, b) => (a.eventDateLocal > b.eventDateLocal) ? 1 : -1); //sort by date ascending\n        return this.state.events.map((event, index) => {\n            const { id, name, eventDateLocal, venue, webURI, ticketInfo } = event //destructuring\n            return (\n                <tr key={id}>\n                    <td><Moment format=\"ddd, MMM Do\">{eventDateLocal}</Moment></td>\n                    <td><Moment format=\"h:mm a\">{eventDateLocal}</Moment></td>\n                    <td>{name}</td>\n                    <td>{venue.name}</td>\n                    \n                    <td>{new Intl.NumberFormat('en-US',\n                        { style: 'currency', currency: 'USD' }\n                    ).format(ticketInfo.minListPrice)}</td>\n                    <td>{ticketInfo.totalTickets}</td>\n                    <td>{ticketInfo.totalTickets > 0 && <a href={`http://www.stubhub.com/${webURI}`}>Buy Tickets</a>}</td>\n                </tr>\n            )\n        })\n    }\n\n    \n\n    render() { \n        let events = [];\n        return (\n            <div id =\"tableContainer\" class=\"container\">\n                <div id=\"eventsTable table-responsive\">\n                    <table class=\"table table-striped table-dark \"id='events'>\n                        <thead>\n                            <tr>\n                                <th>Date</th>\n                                <th>Time</th>\n                                <th>Event Name</th>\n                                <th>Venue</th>\n                                <th>Lowest Price</th>\n                                <th>Tickets Available</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.renderTableData()}\n                        </tbody>\n                    </table>\n                    {this.state.btnClicked === true && this.state.events.length === 0 &&\n                        <p>No Results Found</p>\n                    }\n                </div>\n            </div>\n        )\n    };\n}\n \nexport default ShowTodaysEvents;","\nimport React, { Component } from 'react';\nimport './MainPage.css';\n\nclass MainPage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            eventSearch: \"\",\n        };\n    }\n\n\n    myChangeHandler = (event) => {\n        this.setState({ eventSearch: event.target.value });\n    }\n\n    render() { \n        return (  \n            <div>\n                <div id=\"pageTitle\">\n                    <div id=\"mainText\">\n                        <h1>Wisconsin Ticket Finder</h1>\n                        <p>StubHub Event Search</p>\n                    </div>\n                    \n                </div>\n                <div id=\"search\">\n                    <div class=\"row justify-content-center\">\n                        <div id=\"searchForm\">\n                            \n                                <input id=\"searchBox\"\n                                    type='text'\n                                    class = 'form-rounded'\n                                    onChange={this.myChangeHandler}\n                                />\n                                {/* <button id=\"searchBtn\" class=\"btn btn-sm btn-primary\" onClick={() => this.props.action('search', this.state.eventSearch)} > Search </button> */}\n                            \n                        </div>\n                    </div>\n                        <div class=\"row justify-content-center\">\n                        <button id=\"searchBtn\" class=\"btn btn-sm btn-primary\" onClick={() => this.props.action('search', this.state.eventSearch)} > Search </button>\n\n                            <button class=\"btn btn-sm btn-primary\" onClick={() => this.props.action('todaysEvents')} > Show Today's Events </button>\n                            {/* <input class=\"btn btn-sm btn-secondary\" onClick={this.props.handler} type=\"submit\" value=\"Show Today's Events\"></input> */}\n                        </div>\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default MainPage;","import React, { Component } from 'react';\nimport { Navbar, Nav, Form, FormControl, Button, NavItem, NavDropdown, MenuItem } from 'react-bootstrap';\n\nclass TopNavbar extends Component {\n    state = {  }\n    render() { \n        return (\n            <div>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n                <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\n                    <Nav.Link href=\"#features\">Features</Nav.Link>\n                    <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                </Nav>\n                <Form inline>\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                    <Button variant=\"outline-info\">Search</Button>\n                </Form>\n            </Navbar>\n            </div> \n         );\n    }\n\n}\n \nexport default TopNavbar;","import React, { Component } from 'react';\n\nclass SearchForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { username: '' };\n    }\n    mySubmitHandler = (event) => {\n        event.preventDefault();\n        alert(\"You are submitting \" + this.state.username);\n    }\n    myChangeHandler = (event) => {\n        this.setState({ username: event.target.value });\n    }\n    render() {\n        return (\n            <form onSubmit={this.mySubmitHandler}>\n                <h1>Hello {this.state.username}</h1>\n                <p>Enter your name, and submit:</p>\n                <input\n                    type='text'\n                    onChange={this.myChangeHandler}\n                />\n                <input\n                    type='submit'\n                />\n            </form>\n        );\n    }\n}\n \nexport default SearchForm;","import React, { Component } from 'react';\n\nimport MainPage from \"./MainPage\";\nimport ShowTodaysEvents from './ShowTodaysEvents';\n\nclass PageContainer extends Component {\n    constructor(props) {\n        super(props);\n        this.handler = this.handler.bind(this);\n        this.state = {\n            btnClicked: false,\n            whichButton: '',\n            searchString: ''\n        };\n    }\n\n    handler(whichButton, searchString) {\n        this.setState({\n            btnClicked: true,\n            searchString: searchString,\n        });\n        if (whichButton === 'todaysEvents') {\n            this.setState({\n                whichButton: 'todaysEvents'\n            })\n        } else {\n            this.setState({\n                whichButton: 'search'\n            })\n        }\n        console.log('btnClicked!')\n    }\n\n    render() { \n        let btnState = 'today';\n        return (  \n            <div>\n                <MainPage action={this.handler}/>\n                {this.state.btnClicked === true &&\n                    <ShowTodaysEvents whichButton={this.state.whichButton} searchString={this.state.searchString}/>\n                }   \n            </div>\n        );\n    }\n}\n \nexport default PageContainer;","import React from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport logo from './logo.svg';\nimport './App.css';\nimport TodaysEvents from './components/TodaysEvents';\nimport ShowTodaysEvents from './components/ShowTodaysEvents';\nimport TopNavbar from './components/TopNavbar';\nimport SearchForm from './components/SearchForm';\nimport MainPage from './components/MainPage';\nimport PageContainer from './components/PageContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageContainer />\n      {/* <ShowTodaysEvents /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}